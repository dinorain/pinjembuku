// Code generated by MockGen. DO NOT EDIT.
// Source: pg_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/dinorain/pinjembuku/internal/models"
	utils "github.com/dinorain/pinjembuku/pkg/utils"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockLibrarianPGRepository is a mock of LibrarianPGRepository interface.
type MockLibrarianPGRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLibrarianPGRepositoryMockRecorder
}

// MockLibrarianPGRepositoryMockRecorder is the mock recorder for MockLibrarianPGRepository.
type MockLibrarianPGRepositoryMockRecorder struct {
	mock *MockLibrarianPGRepository
}

// NewMockLibrarianPGRepository creates a new mock instance.
func NewMockLibrarianPGRepository(ctrl *gomock.Controller) *MockLibrarianPGRepository {
	mock := &MockLibrarianPGRepository{ctrl: ctrl}
	mock.recorder = &MockLibrarianPGRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLibrarianPGRepository) EXPECT() *MockLibrarianPGRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLibrarianPGRepository) Create(ctx context.Context, user *models.Librarian) (*models.Librarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, user)
	ret0, _ := ret[0].(*models.Librarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLibrarianPGRepositoryMockRecorder) Create(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLibrarianPGRepository)(nil).Create), ctx, user)
}

// DeleteById mocks base method.
func (m *MockLibrarianPGRepository) DeleteById(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteById", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteById indicates an expected call of DeleteById.
func (mr *MockLibrarianPGRepositoryMockRecorder) DeleteById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteById", reflect.TypeOf((*MockLibrarianPGRepository)(nil).DeleteById), ctx, userID)
}

// FindAll mocks base method.
func (m *MockLibrarianPGRepository) FindAll(ctx context.Context, pagination *utils.Pagination) ([]models.Librarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx, pagination)
	ret0, _ := ret[0].([]models.Librarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockLibrarianPGRepositoryMockRecorder) FindAll(ctx, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockLibrarianPGRepository)(nil).FindAll), ctx, pagination)
}

// FindByEmail mocks base method.
func (m *MockLibrarianPGRepository) FindByEmail(ctx context.Context, email string) (*models.Librarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(*models.Librarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockLibrarianPGRepositoryMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockLibrarianPGRepository)(nil).FindByEmail), ctx, email)
}

// FindById mocks base method.
func (m *MockLibrarianPGRepository) FindById(ctx context.Context, userID uuid.UUID) (*models.Librarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, userID)
	ret0, _ := ret[0].(*models.Librarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockLibrarianPGRepositoryMockRecorder) FindById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockLibrarianPGRepository)(nil).FindById), ctx, userID)
}

// UpdateById mocks base method.
func (m *MockLibrarianPGRepository) UpdateById(ctx context.Context, user *models.Librarian) (*models.Librarian, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateById", ctx, user)
	ret0, _ := ret[0].(*models.Librarian)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateById indicates an expected call of UpdateById.
func (mr *MockLibrarianPGRepositoryMockRecorder) UpdateById(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateById", reflect.TypeOf((*MockLibrarianPGRepository)(nil).UpdateById), ctx, user)
}
