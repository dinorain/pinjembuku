// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	models "github.com/dinorain/pinjembuku/internal/models"
	utils "github.com/dinorain/pinjembuku/pkg/utils"
	gomock "github.com/golang/mock/gomock"
)

// MockBookUseCase is a mock of BookUseCase interface.
type MockBookUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockBookUseCaseMockRecorder
}

// MockBookUseCaseMockRecorder is the mock recorder for MockBookUseCase.
type MockBookUseCaseMockRecorder struct {
	mock *MockBookUseCase
}

// NewMockBookUseCase creates a new mock instance.
func NewMockBookUseCase(ctrl *gomock.Controller) *MockBookUseCase {
	mock := &MockBookUseCase{ctrl: ctrl}
	mock.recorder = &MockBookUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookUseCase) EXPECT() *MockBookUseCaseMockRecorder {
	return m.recorder
}

// FindAllBySubject mocks base method.
func (m *MockBookUseCase) FindAllBySubject(ctx context.Context, subject string, pagination *utils.Pagination) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllBySubject", ctx, subject, pagination)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllBySubject indicates an expected call of FindAllBySubject.
func (mr *MockBookUseCaseMockRecorder) FindAllBySubject(ctx, subject, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllBySubject", reflect.TypeOf((*MockBookUseCase)(nil).FindAllBySubject), ctx, subject, pagination)
}

// FindByWork mocks base method.
func (m *MockBookUseCase) FindByWork(ctx context.Context, bookKey string) (*models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByWork", ctx, bookKey)
	ret0, _ := ret[0].(*models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByWork indicates an expected call of FindByWork.
func (mr *MockBookUseCaseMockRecorder) FindByWork(ctx, bookKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByWork", reflect.TypeOf((*MockBookUseCase)(nil).FindByWork), ctx, bookKey)
}
